[0.024s] Invoking command in '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/ubuntu/bags/pc_merger_ws/src/build/pc_merger -- -j8 -l8
[0.093s] [35m[1mScanning dependencies of target pc_merger[0m
[1.469s] [ 50%] [32mBuilding CXX object CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o[0m
[5.740s] In file included from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.741s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:44:22:[m[K [01;35m[Kwarning: [m[Kextra â€˜[01m[K;[m[Kâ€™ [[01;35m[K-Wpedantic[m[K]
[5.743s]    44 |     PCL_ADD_INTENSITY[01;35m[K;[m[K
[5.745s]       |                      [01;35m[K^[m[K
[5.745s]       |                      [31m[K-[m[K
[5.785s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In constructor â€˜[01m[KPointCloudCombiner::PointCloudCombiner(const string&)[m[Kâ€™:
[5.786s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:7:50:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.786s]     7 |     this->declare_parameter(PARAM_MERGED_PC_TOPIC[01;35m[K)[m[K;
[5.787s]       |                                                  [01;35m[K^[m[K
[5.787s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.787s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.788s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.788s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.789s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.790s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.790s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.791s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.792s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:8:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.792s]     8 |     this->declare_parameter(PARAM_FRONT_PC_TOPIC[01;35m[K)[m[K;
[5.794s]       |                                                 [01;35m[K^[m[K
[5.794s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.795s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.795s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.796s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.796s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.797s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.798s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.799s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.800s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:9:48:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.800s]     9 |     this->declare_parameter(PARAM_LEFT_PC_TOPIC[01;35m[K)[m[K;
[5.801s]       |                                                [01;35m[K^[m[K
[5.801s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.802s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.802s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.803s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.803s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.804s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.804s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.805s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.805s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:10:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.806s]    10 |     this->declare_parameter(PARAM_RIGHT_PC_TOPIC[01;35m[K)[m[K;
[5.808s]       |                                                 [01;35m[K^[m[K
[5.809s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.810s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.810s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.811s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.812s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.812s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.813s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.813s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.814s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:12:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.815s]    12 |     this->declare_parameter(PARAM_FRONT_LIDAR_FRAME[01;35m[K)[m[K;
[5.815s]       |                                                    [01;35m[K^[m[K
[5.816s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.816s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.817s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.817s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.818s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.818s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.819s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.819s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.820s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:13:51:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.820s]    13 |     this->declare_parameter(PARAM_LEFT_LIDAR_FRAME[01;35m[K)[m[K;
[5.821s]       |                                                   [01;35m[K^[m[K
[5.821s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.821s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.822s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.822s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.823s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.824s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.825s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.825s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.826s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:14:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.826s]    14 |     this->declare_parameter(PARAM_RIGHT_LIDAR_FRAME[01;35m[K)[m[K;
[5.826s]       |                                                    [01;35m[K^[m[K
[5.828s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.828s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.829s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.830s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.830s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.830s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.831s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.831s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.832s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:52:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kfront_subscriber_[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Kront_subscriber_[m[Kâ€™?
[5.832s]    52 |     [01;31m[Kfront_subscriber_[m[K = this->create_subscription<sensor_msgs::msg::PointCloud2>(
[5.833s]       |     [01;31m[K^~~~~~~~~~~~~~~~~[m[K
[5.833s]       |     [32m[Kront_subscriber_[m[K
[5.834s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:45:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KString[m[Kâ€™ in namespace â€˜[01m[Kstd_msgs::msg[m[Kâ€™ does not name a type
[5.834s]    54 |     std::function<void(const std_msgs::msg::[01;31m[KString[m[K::SharedPtr msg)> cb_front = std::bind(
[5.835s]       |                                             [01;31m[K^~~~~~[m[K
[5.835s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:63:[m[K [01;31m[Kerror: [m[Kexpected unqualified-id before â€˜[01m[Kmsg[m[Kâ€™
[5.836s]    54 |     std::function<void(const std_msgs::msg::String::SharedPtr [01;31m[Kmsg[m[K)> cb_front = std::bind(
[5.836s]       |                                                               [01;31m[K^~~[m[K
[5.836s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:62:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before â€˜[01m[Kmsg[m[Kâ€™
[5.837s]    54 |     std::function<void[34m[K([m[Kconst std_msgs::msg::String::SharedPtr[01;31m[K [m[K[32m[Kmsg[m[K)> cb_front = std::bind(
[5.837s]       |                       [34m[K~[m[K                                      [01;31m[K^[m[K[32m[K~~~[m[K
[5.838s]       |                                                              [32m[K)[m[K
[5.840s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:63:[m[K [01;31m[Kerror: [m[Kexpected template-argument before â€˜[01m[Kmsg[m[Kâ€™
[5.841s]    54 |     std::function<void(const std_msgs::msg::String::SharedPtr [01;31m[Kmsg[m[K)> cb_front = std::bind(
[5.842s]       |                                                               [01;31m[K^~~[m[K
[5.842s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:63:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K>[m[Kâ€™ before â€˜[01m[Kmsg[m[Kâ€™
[5.843s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:66:[m[K [01;31m[Kerror: [m[Kexpected unqualified-id before â€˜[01m[K)[m[Kâ€™ token
[5.843s]    54 |     std::function<void(const std_msgs::msg::String::SharedPtr msg[01;31m[K)[m[K> cb_front = std::bind(
[5.844s]       |                                                                  [01;31m[K^[m[K
[5.844s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:45:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KString[m[Kâ€™ in namespace â€˜[01m[Kstd_msgs::msg[m[Kâ€™ does not name a type
[5.845s]    56 |     std::function<void(const std_msgs::msg::[01;31m[KString[m[K::SharedPtr msg)> cb_left = std::bind(
[5.845s]       |                                             [01;31m[K^~~~~~[m[K
[5.846s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:63:[m[K [01;31m[Kerror: [m[Kexpected unqualified-id before â€˜[01m[Kmsg[m[Kâ€™
[5.846s]    56 |     std::function<void(const std_msgs::msg::String::SharedPtr [01;31m[Kmsg[m[K)> cb_left = std::bind(
[5.847s]       |                                                               [01;31m[K^~~[m[K
[5.847s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:62:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before â€˜[01m[Kmsg[m[Kâ€™
[5.847s]    56 |     std::function<void[34m[K([m[Kconst std_msgs::msg::String::SharedPtr[01;31m[K [m[K[32m[Kmsg[m[K)> cb_left = std::bind(
[5.848s]       |                       [34m[K~[m[K                                      [01;31m[K^[m[K[32m[K~~~[m[K
[5.848s]       |                                                              [32m[K)[m[K
[5.849s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:63:[m[K [01;31m[Kerror: [m[Kexpected template-argument before â€˜[01m[Kmsg[m[Kâ€™
[5.849s]    56 |     std::function<void(const std_msgs::msg::String::SharedPtr [01;31m[Kmsg[m[K)> cb_left = std::bind(
[5.850s]       |                                                               [01;31m[K^~~[m[K
[5.850s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:63:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K>[m[Kâ€™ before â€˜[01m[Kmsg[m[Kâ€™
[5.851s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:66:[m[K [01;31m[Kerror: [m[Kexpected unqualified-id before â€˜[01m[K)[m[Kâ€™ token
[5.851s]    56 |     std::function<void(const std_msgs::msg::String::SharedPtr msg[01;31m[K)[m[K> cb_left = std::bind(
[5.852s]       |                                                                  [01;31m[K^[m[K
[5.852s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:45:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KString[m[Kâ€™ in namespace â€˜[01m[Kstd_msgs::msg[m[Kâ€™ does not name a type
[5.853s]    58 |     std::function<void(const std_msgs::msg::[01;31m[KString[m[K::SharedPtr msg)> cb_right = std::bind(
[5.853s]       |                                             [01;31m[K^~~~~~[m[K
[5.854s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:63:[m[K [01;31m[Kerror: [m[Kexpected unqualified-id before â€˜[01m[Kmsg[m[Kâ€™
[5.854s]    58 |     std::function<void(const std_msgs::msg::String::SharedPtr [01;31m[Kmsg[m[K)> cb_right = std::bind(
[5.855s]       |                                                               [01;31m[K^~~[m[K
[5.855s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:62:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K)[m[Kâ€™ before â€˜[01m[Kmsg[m[Kâ€™
[5.855s]    58 |     std::function<void[34m[K([m[Kconst std_msgs::msg::String::SharedPtr[01;31m[K [m[K[32m[Kmsg[m[K)> cb_right = std::bind(
[5.856s]       |                       [34m[K~[m[K                                      [01;31m[K^[m[K[32m[K~~~[m[K
[5.856s]       |                                                              [32m[K)[m[K
[5.857s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:63:[m[K [01;31m[Kerror: [m[Kexpected template-argument before â€˜[01m[Kmsg[m[Kâ€™
[5.857s]    58 |     std::function<void(const std_msgs::msg::String::SharedPtr [01;31m[Kmsg[m[K)> cb_right = std::bind(
[5.858s]       |                                                               [01;31m[K^~~[m[K
[5.858s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:63:[m[K [01;31m[Kerror: [m[Kexpected â€˜[01m[K>[m[Kâ€™ before â€˜[01m[Kmsg[m[Kâ€™
[5.860s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:66:[m[K [01;31m[Kerror: [m[Kexpected unqualified-id before â€˜[01m[K)[m[Kâ€™ token
[5.861s]    58 |     std::function<void(const std_msgs::msg::String::SharedPtr msg[01;31m[K)[m[K> cb_right = std::bind(
[5.861s]       |                                                                  [01;31m[K^[m[K
[5.862s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:65:40:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcb_right[m[Kâ€™ was not declared in this scope
[5.863s]    65 |         right_pc_topic_, qos_profile, ([01;31m[Kcb_right[m[K));
[5.864s]       |                                        [01;31m[K^~~~~~~~[m[K
[5.865s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:67:39:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcb_left[m[Kâ€™ was not declared in this scope
[5.865s]    67 |         left_pc_topic_, qos_profile, ([01;31m[Kcb_left[m[K));
[5.866s]       |                                       [01;31m[K^~~~~~~[m[K
[5.866s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K At global scope:
[5.867s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:78:35:[m[K [01;31m[Kerror: [m[Kno declaration matches â€˜[01m[Kpcl::PointCloud<PointXYZIRT>::Ptr PointCloudCombiner::getTargetCloud(const string&)[m[Kâ€™
[5.867s]    78 | pcl::PointCloud<PointXYZIRT>::Ptr [01;31m[KPointCloudCombiner[m[K::getTargetCloud(const std::string& topic) {
[5.868s]       |                                   [01;31m[K^~~~~~~~~~~~~~~~~~[m[K
[5.868s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:78:35:[m[K [01;36m[Knote: [m[Kno functions named â€˜[01m[Kpcl::PointCloud<PointXYZIRT>::Ptr PointCloudCombiner::getTargetCloud(const string&)[m[Kâ€™
[5.869s] In file included from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.871s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:76:7:[m[K [01;36m[Knote: [m[Kâ€˜[01m[Kclass PointCloudCombiner[m[Kâ€™ defined here
[5.872s]    76 | class [01;36m[KPointCloudCombiner[m[K : public rclcpp::Node {
[5.873s]       |       [01;36m[K^~~~~~~~~~~~~~~~~~[m[K
[5.874s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In member function â€˜[01m[Kvoid PointCloudCombiner::cloudHandler(sensor_msgs::msg::PointCloud2_<std::allocator<void> >::SharedPtr, std::string)[m[Kâ€™:
[5.874s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:94:24:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KgetTargetCloud[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[KtargetCloud[m[Kâ€™?
[5.875s]    94 |     auto targetCloud = [01;31m[KgetTargetCloud[m[K(topicName);
[5.875s]       |                        [01;31m[K^~~~~~~~~~~~~~[m[K
[5.876s]       |                        [32m[KtargetCloud[m[K
[5.876s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:100:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kpcl_ros[m[Kâ€™ has not been declared
[5.876s]   100 |     [01;31m[Kpcl_ros[m[K::transformPointCloud(front_lidar_frame_, *targetCloud, *targetCloud, tf_listener_);
[5.877s]       |     [01;31m[K^~~~~~~[m[K
[5.877s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In member function â€˜[01m[Kvoid PointCloudCombiner::publishCombinedPointCloud(rclcpp::Time)[m[Kâ€™:
[5.878s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:112:6:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kmerged_cloud[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Kmerged_cloud_[m[Kâ€™?
[5.878s]   112 |     *[01;31m[Kmerged_cloud[m[K += *right_cloud_;
[5.879s]       |      [01;31m[K^~~~~~~~~~~~[m[K
[5.879s]       |      [32m[Kmerged_cloud_[m[K
[5.880s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:116:20:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcombined_point_cloud_[m[Kâ€™ was not declared in this scope
[5.881s]   116 |     pcl::toROSMsg(*[01;31m[Kcombined_point_cloud_[m[K, combined_msg);
[5.881s]       |                    [01;31m[K^~~~~~~~~~~~~~~~~~~~~[m[K
[5.882s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:34:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator*[m[Kâ€™ (operand type is â€˜[01m[Ksensor_msgs::msg::PointCloud2[m[Kâ€™ {aka â€˜[01m[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >[m[Kâ€™})
[5.883s]   119 |     combined_publisher_->publish([01;31m[K*combined_msg[m[K);
[5.883s]       |                                  [01;31m[K^~~~~~~~~~~~~[m[K
[5.884s] In file included from [01m[K/usr/include/eigen3/Eigen/Core:96[m[K,
[5.884s]                  from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
[5.884s]                  from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
[5.885s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8[m[K,
[5.885s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.886s] [01m[K/usr/include/c++/9/complex:391:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const std::complex<_Tp>&)[m[Kâ€™
[5.886s]   391 |     [01;36m[Koperator[m[K*(const complex<_Tp>& __x, const complex<_Tp>& __y)
[5.888s]       |     [01;36m[K^~~~~~~~[m[K
[5.889s] [01m[K/usr/include/c++/9/complex:391:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[5.889s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:35:[m[K [01;36m[Knote: [m[K  â€˜[01m[Ksensor_msgs::msg::PointCloud2[m[Kâ€™ {aka â€˜[01m[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >[m[Kâ€™} is not derived from â€˜[01m[Kconst std::complex<_Tp>[m[Kâ€™
[5.890s]   119 |     combined_publisher_->publish(*[01;36m[Kcombined_msg[m[K);
[5.891s]       |                                   [01;36m[K^~~~~~~~~~~~[m[K
[5.892s] In file included from [01m[K/usr/include/eigen3/Eigen/Core:96[m[K,
[5.893s]                  from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
[5.893s]                  from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
[5.894s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8[m[K,
[5.894s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.895s] [01m[K/usr/include/c++/9/complex:400:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const _Tp&)[m[Kâ€™
[5.895s]   400 |     [01;36m[Koperator[m[K*(const complex<_Tp>& __x, const _Tp& __y)
[5.895s]       |     [01;36m[K^~~~~~~~[m[K
[5.896s] [01m[K/usr/include/c++/9/complex:400:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[5.896s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:35:[m[K [01;36m[Knote: [m[K  â€˜[01m[Ksensor_msgs::msg::PointCloud2[m[Kâ€™ {aka â€˜[01m[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >[m[Kâ€™} is not derived from â€˜[01m[Kconst std::complex<_Tp>[m[Kâ€™
[5.897s]   119 |     combined_publisher_->publish(*[01;36m[Kcombined_msg[m[K);
[5.897s]       |                                   [01;36m[K^~~~~~~~~~~~[m[K
[5.898s] In file included from [01m[K/usr/include/eigen3/Eigen/Core:96[m[K,
[5.898s]                  from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
[5.899s]                  from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
[5.899s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8[m[K,
[5.900s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.900s] [01m[K/usr/include/c++/9/complex:409:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const _Tp&, const std::complex<_Tp>&)[m[Kâ€™
[5.901s]   409 |     [01;36m[Koperator[m[K*(const _Tp& __x, const complex<_Tp>& __y)
[5.901s]       |     [01;36m[K^~~~~~~~[m[K
[5.904s] [01m[K/usr/include/c++/9/complex:409:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[5.905s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:35:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[5.905s]   119 |     combined_publisher_->publish(*[01;36m[Kcombined_msg[m[K);
[5.906s]       |                                   [01;36m[K^~~~~~~~~~~~[m[K
[5.906s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[5.907s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:124:33:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KPointCloudCombinerNode[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[KPointCloudCombiner[m[Kâ€™?
[5.907s]   124 |   rclcpp::spin(std::make_shared<[01;31m[KPointCloudCombinerNode[m[K>("point_cloud_combiner"));
[5.908s]       |                                 [01;31m[K^~~~~~~~~~~~~~~~~~~~~~[m[K
[5.908s]       |                                 [32m[KPointCloudCombiner[m[K
[5.909s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:124:79:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kmake_shared<<expression error> >(const char [21])[m[Kâ€™
[5.909s]   124 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"[01;31m[K)[m[K);
[5.910s]       |                                                                               [01;31m[K^[m[K
[5.910s] In file included from [01m[K/usr/include/c++/9/memory:81[m[K,
[5.910s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:154[m[K,
[5.911s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[5.911s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[5.912s] [01m[K/usr/include/c++/9/bits/shared_ptr.h:714:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp, class ... _Args> std::shared_ptr<_Tp> std::make_shared(_Args&& ...)[m[Kâ€™
[5.912s]   714 |     [01;36m[Kmake_shared[m[K(_Args&&... __args)
[5.913s]       |     [01;36m[K^~~~~~~~~~~[m[K
[5.913s] [01m[K/usr/include/c++/9/bits/shared_ptr.h:714:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[5.913s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:124:79:[m[K [01;31m[Kerror: [m[Ktemplate argument 1 is invalid
[5.914s]   124 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"[01;31m[K)[m[K);
[5.914s]       |                                                                               [01;31m[K^[m[K
[7.084s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29[m[K,
[7.084s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26[m[K,
[7.085s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[7.085s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[7.087s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[7.088s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[7.089s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[7.090s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[7.090s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[7.091s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[7.092s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[7.092s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[7.093s] /opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[7.093s] [01m[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.094s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.094s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.095s] [01m[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.095s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:121:[m[K   required from here
[7.096s] [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™})
[7.096s]   185 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[7.097s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[7.097s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:23[m[K,
[7.097s]                  from [01m[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29[m[K,
[7.098s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26[m[K,
[7.098s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[7.099s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[7.099s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[7.100s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[7.100s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[7.101s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[7.101s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[7.102s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[7.102s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[7.103s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[7.104s] [01m[K/usr/include/c++/9/variant:1299:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[7.105s]  1299 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[7.106s]       |                [01;36m[K^~~~~~~~[m[K
[7.106s] [01m[K/usr/include/c++/9/variant:1299:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[7.107s]  1299 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[7.107s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[7.109s] [01m[K/usr/include/c++/9/variant:1300:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[7.110s]  1300 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[7.110s]       |                [01;36m[K^~~~~~~~[m[K
[7.111s] [01m[K/usr/include/c++/9/variant:1300:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[7.111s]  1300 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[7.112s]       |                          [01;36m[K^~~~~~~~~[m[K
[7.112s] [01m[K/usr/include/c++/9/variant:1362:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[7.113s]  1362 |  [01;36m[Koperator[m[K=(_Tp&& __rhs)
[7.113s]       |  [01;36m[K^~~~~~~~[m[K
[7.114s] [01m[K/usr/include/c++/9/variant:1362:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[7.114s] /usr/include/c++/9/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[7.115s] [01m[K/usr/include/c++/9/variant:1358:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>][m[Kâ€™
[7.116s] [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[7.116s] [01m[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.117s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.117s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.118s] [01m[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[7.119s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:121:[m[K   required from here
[7.121s] [01m[K/usr/include/c++/9/variant:1276:8:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[7.122s]  1276 |  using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[7.122s]       |        [01;31m[K^~~~~~~~~~~~~~~[m[K
[8.645s] make[2]: *** [CMakeFiles/pc_merger.dir/build.make:63: CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o] Error 1
[8.646s] make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/pc_merger.dir/all] Error 2
[8.647s] make: *** [Makefile:141: all] Error 2
[8.650s] Invoked command in '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger' returned '2': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/ubuntu/bags/pc_merger_ws/src/build/pc_merger -- -j8 -l8
