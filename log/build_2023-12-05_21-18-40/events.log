[0.000000] (-) TimerEvent: {}
[0.000322] (pc_merger) JobQueued: {'identifier': 'pc_merger', 'dependencies': OrderedDict()}
[0.000556] (pc_merger) JobStarted: {'identifier': 'pc_merger'}
[0.014272] (pc_merger) JobProgress: {'identifier': 'pc_merger', 'progress': 'cmake'}
[0.016284] (pc_merger) JobProgress: {'identifier': 'pc_merger', 'progress': 'build'}
[0.016950] (pc_merger) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger', '--', '-j8', '-l8'], 'cwd': '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger', 'env': OrderedDict([('USER', 'ubuntu'), ('HOSTNAME', 'd60cd71c3916'), ('GIT_ASKPASS', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/extensions/git/dist/askpass.sh'), ('SHLVL', '2'), ('LD_LIBRARY_PATH', '/usr/lib/aarch64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/aarch64-linux-gnu:/opt/ros/galactic/lib'), ('BROWSER', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/bin/helpers/browser.sh'), ('HOME', '/home/ubuntu'), ('OLDPWD', '/home/ubuntu/bags'), ('TERM_PROGRAM_VERSION', '1.84.2'), ('VSCODE_IPC_HOOK_CLI', '/tmp/vscode-ipc-ddd2bd13-8b1c-4022-bebd-63f3d0ac1f6e.sock'), ('ROS_PYTHON_VERSION', '3'), ('VSCODE_GIT_ASKPASS_MAIN', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/node'), ('LC_CTYPE', 'C.UTF-8'), ('COLORTERM', 'truecolor'), ('REMOTE_CONTAINERS', 'true'), ('ROS_DISTRO', 'galactic'), ('REMOTE_CONTAINERS_IPC', '/tmp/vscode-remote-containers-ipc-02bb064f-03c9-435f-ae1e-65a7c36f8dd8.sock'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('TERM', 'xterm-256color'), ('ROS_LOCALHOST_ONLY', '0'), ('QT_X11_NO_MITSHM', '1'), ('PATH', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/bin/remote-cli:/opt/ros/galactic/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin'), ('REMOTE_CONTAINERS_SOCKETS', '["/tmp/vscode-ssh-auth-02bb064f-03c9-435f-ae1e-65a7c36f8dd8.sock","/tmp/.X11-unix/X4"]'), ('DISPLAY', ':4'), ('LANG', 'en_US.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/tmp/vscode-git-001cbcc4a2.sock'), ('TERM_PROGRAM', 'vscode'), ('SSH_AUTH_SOCK', '/tmp/vscode-ssh-auth-02bb064f-03c9-435f-ae1e-65a7c36f8dd8.sock'), ('AMENT_PREFIX_PATH', '/opt/ros/galactic'), ('DEBIAN_FRONTEND', 'noninteractive'), ('REMOTE_CONTAINERS_DISPLAY_SOCK', '/tmp/.X11-unix/X4'), ('SHELL', '/bin/bash'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('PWD', '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger'), ('XDG_DATA_DIRS', '/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/galactic/lib/python3.8/site-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/opt/ros/galactic')]), 'shell': False}
[0.094234] (pc_merger) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target pc_merger\x1b[0m\n'}
[0.099681] (-) TimerEvent: {}
[0.200159] (-) TimerEvent: {}
[0.300873] (-) TimerEvent: {}
[0.401470] (-) TimerEvent: {}
[0.501948] (-) TimerEvent: {}
[0.602442] (-) TimerEvent: {}
[0.702887] (-) TimerEvent: {}
[0.803411] (-) TimerEvent: {}
[0.904098] (-) TimerEvent: {}
[1.004698] (-) TimerEvent: {}
[1.105894] (-) TimerEvent: {}
[1.206451] (-) TimerEvent: {}
[1.306949] (-) TimerEvent: {}
[1.407422] (-) TimerEvent: {}
[1.509652] (-) TimerEvent: {}
[1.581629] (pc_merger) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o\x1b[0m\n'}
[1.609840] (-) TimerEvent: {}
[1.710431] (-) TimerEvent: {}
[1.810953] (-) TimerEvent: {}
[1.913097] (-) TimerEvent: {}
[2.013702] (-) TimerEvent: {}
[2.114283] (-) TimerEvent: {}
[2.214840] (-) TimerEvent: {}
[2.316321] (-) TimerEvent: {}
[2.417559] (-) TimerEvent: {}
[2.519502] (-) TimerEvent: {}
[2.620086] (-) TimerEvent: {}
[2.720828] (-) TimerEvent: {}
[2.821461] (-) TimerEvent: {}
[2.922224] (-) TimerEvent: {}
[3.022752] (-) TimerEvent: {}
[3.123267] (-) TimerEvent: {}
[3.223836] (-) TimerEvent: {}
[3.324575] (-) TimerEvent: {}
[3.425834] (-) TimerEvent: {}
[3.526430] (-) TimerEvent: {}
[3.626953] (-) TimerEvent: {}
[3.728261] (-) TimerEvent: {}
[3.829337] (-) TimerEvent: {}
[3.930854] (-) TimerEvent: {}
[4.031314] (-) TimerEvent: {}
[4.132127] (-) TimerEvent: {}
[4.232619] (-) TimerEvent: {}
[4.333412] (-) TimerEvent: {}
[4.433934] (-) TimerEvent: {}
[4.536665] (-) TimerEvent: {}
[4.637714] (-) TimerEvent: {}
[4.740037] (-) TimerEvent: {}
[4.841613] (-) TimerEvent: {}
[4.943365] (-) TimerEvent: {}
[5.044871] (-) TimerEvent: {}
[5.146394] (-) TimerEvent: {}
[5.247131] (-) TimerEvent: {}
[5.347683] (-) TimerEvent: {}
[5.448302] (-) TimerEvent: {}
[5.549630] (-) TimerEvent: {}
[5.651907] (-) TimerEvent: {}
[5.755430] (-) TimerEvent: {}
[5.856087] (-) TimerEvent: {}
[5.957203] (-) TimerEvent: {}
[6.057915] (-) TimerEvent: {}
[6.160115] (-) TimerEvent: {}
[6.260698] (-) TimerEvent: {}
[6.364745] (-) TimerEvent: {}
[6.444181] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.446213] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:44:22:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kextra \xe2\x80\x98\x1b[01m\x1b[K;\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K-Wpedantic\x1b[m\x1b[K]\n'}
[6.446957] (pc_merger) StderrLine: {'line': b'   44 |     PCL_ADD_INTENSITY\x1b[01;35m\x1b[K;\x1b[m\x1b[K\n'}
[6.447573] (pc_merger) StderrLine: {'line': b'      |                      \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.448150] (pc_merger) StderrLine: {'line': b'      |                      \x1b[31m\x1b[K-\x1b[m\x1b[K\n'}
[6.465268] (-) TimerEvent: {}
[6.528699] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KPointCloudCombiner::PointCloudCombiner(const string&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.529836] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:7:50:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.530562] (pc_merger) StderrLine: {'line': b'    7 |     this->declare_parameter(PARAM_MERGED_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.531135] (pc_merger) StderrLine: {'line': b'      |                                                  \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.531830] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.532469] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.533030] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.533397] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.533755] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.534114] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.534627] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.535090] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.536698] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:8:49:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.539189] (pc_merger) StderrLine: {'line': b'    8 |     this->declare_parameter(PARAM_FRONT_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.540084] (pc_merger) StderrLine: {'line': b'      |                                                 \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.540851] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.541389] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.541967] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.542660] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.543281] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.543898] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.544392] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.544952] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.545417] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:9:48:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.546020] (pc_merger) StderrLine: {'line': b'    9 |     this->declare_parameter(PARAM_LEFT_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.546450] (pc_merger) StderrLine: {'line': b'      |                                                \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.547027] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.547711] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.548534] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.549908] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.550546] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.551260] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.552147] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.552752] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.553220] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:10:49:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.553827] (pc_merger) StderrLine: {'line': b'   10 |     this->declare_parameter(PARAM_RIGHT_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.554364] (pc_merger) StderrLine: {'line': b'      |                                                 \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.554877] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.555600] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.556634] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.557487] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.558101] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.559209] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.559979] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.560634] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.561223] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:12:52:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.565538] (-) TimerEvent: {}
[6.566557] (pc_merger) StderrLine: {'line': b'   12 |     this->declare_parameter(PARAM_FRONT_LIDAR_FRAME\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.567277] (pc_merger) StderrLine: {'line': b'      |                                                    \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.569069] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.570087] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.570873] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.571466] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.571997] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.572571] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.573164] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.573689] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.574299] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:13:51:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.575029] (pc_merger) StderrLine: {'line': b'   13 |     this->declare_parameter(PARAM_LEFT_LIDAR_FRAME\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.575658] (pc_merger) StderrLine: {'line': b'      |                                                   \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.576210] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.576784] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.577361] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.577884] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.578298] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.578733] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.579148] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.579578] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.580005] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:14:52:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[6.580430] (pc_merger) StderrLine: {'line': b'   14 |     this->declare_parameter(PARAM_RIGHT_LIDAR_FRAME\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[6.580872] (pc_merger) StderrLine: {'line': b'      |                                                    \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[6.581349] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[6.581767] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[6.582165] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[6.582754] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.583247] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.583678] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[6.584100] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[6.584511] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.584923] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K At global scope:\n'}
[6.585326] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:82:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno declaration matches \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<PointXYZIRT>::Ptr PointCloudCombiner::getTargetCloud(const string&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.585916] (pc_merger) StderrLine: {'line': b'   82 | pcl::PointCloud<PointXYZIRT>::Ptr \x1b[01;31m\x1b[KPointCloudCombiner\x1b[m\x1b[K::getTargetCloud(const std::string& topic) {\n'}
[6.586332] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.586739] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:82:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kno functions named \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<PointXYZIRT>::Ptr PointCloudCombiner::getTargetCloud(const string&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.587144] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.587598] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:76:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kclass PointCloudCombiner\x1b[m\x1b[K\xe2\x80\x99 defined here\n'}
[6.588082] (pc_merger) StderrLine: {'line': b'   76 | class \x1b[01;36m\x1b[KPointCloudCombiner\x1b[m\x1b[K : public rclcpp::Node {\n'}
[6.588569] (pc_merger) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.589088] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid PointCloudCombiner::cloudHandler(sensor_msgs::msg::PointCloud2_<std::allocator<void> >::SharedPtr, std::string)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.589610] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:98:24:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KgetTargetCloud\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[KtargetCloud\x1b[m\x1b[K\xe2\x80\x99?\n'}
[6.590369] (pc_merger) StderrLine: {'line': b'   98 |     auto targetCloud = \x1b[01;31m\x1b[KgetTargetCloud\x1b[m\x1b[K(topicName);\n'}
[6.591038] (pc_merger) StderrLine: {'line': b'      |                        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.591665] (pc_merger) StderrLine: {'line': b'      |                        \x1b[32m\x1b[KtargetCloud\x1b[m\x1b[K\n'}
[6.592163] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:104:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kpcl_ros\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[6.592641] (pc_merger) StderrLine: {'line': b'  104 |     \x1b[01;31m\x1b[Kpcl_ros\x1b[m\x1b[K::transformPointCloud(front_lidar_frame_, *targetCloud, *targetCloud, tf_listener_);\n'}
[6.596613] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[6.597991] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid PointCloudCombiner::publishCombinedPointCloud(rclcpp::Time)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.598613] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:116:6:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kmerged_cloud\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kmerged_cloud_\x1b[m\x1b[K\xe2\x80\x99?\n'}
[6.600467] (pc_merger) StderrLine: {'line': b'  116 |     *\x1b[01;31m\x1b[Kmerged_cloud\x1b[m\x1b[K += *right_cloud_;\n'}
[6.602235] (pc_merger) StderrLine: {'line': b'      |      \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.603167] (pc_merger) StderrLine: {'line': b'      |      \x1b[32m\x1b[Kmerged_cloud_\x1b[m\x1b[K\n'}
[6.603780] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:120:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcombined_point_cloud_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[6.604474] (pc_merger) StderrLine: {'line': b'  120 |     pcl::toROSMsg(*\x1b[01;31m\x1b[Kcombined_point_cloud_\x1b[m\x1b[K, combined_msg);\n'}
[6.605282] (pc_merger) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.605884] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator*\x1b[m\x1b[K\xe2\x80\x99 (operand type is \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99})\n'}
[6.606532] (pc_merger) StderrLine: {'line': b'  123 |     combined_publisher_->publish(\x1b[01;31m\x1b[K*combined_msg\x1b[m\x1b[K);\n'}
[6.607001] (pc_merger) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.607469] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:96\x1b[m\x1b[K,\n'}
[6.608050] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/StdVector:14\x1b[m\x1b[K,\n'}
[6.608534] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.10/pcl/point_cloud.h:45\x1b[m\x1b[K,\n'}
[6.608978] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8\x1b[m\x1b[K,\n'}
[6.609402] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.609828] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:391:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const std::complex<_Tp>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.610437] (pc_merger) StderrLine: {'line': b'  391 |     \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K*(const complex<_Tp>& __x, const complex<_Tp>& __y)\n'}
[6.611056] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.611687] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:391:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.612292] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} is not derived from \xe2\x80\x98\x1b[01m\x1b[Kconst std::complex<_Tp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.612885] (pc_merger) StderrLine: {'line': b'  123 |     combined_publisher_->publish(*\x1b[01;36m\x1b[Kcombined_msg\x1b[m\x1b[K);\n'}
[6.613326] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.613785] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:96\x1b[m\x1b[K,\n'}
[6.614215] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/StdVector:14\x1b[m\x1b[K,\n'}
[6.614642] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.10/pcl/point_cloud.h:45\x1b[m\x1b[K,\n'}
[6.615088] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8\x1b[m\x1b[K,\n'}
[6.615633] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.616102] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:400:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const _Tp&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.616535] (pc_merger) StderrLine: {'line': b'  400 |     \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K*(const complex<_Tp>& __x, const _Tp& __y)\n'}
[6.616948] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.617375] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:400:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.617822] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} is not derived from \xe2\x80\x98\x1b[01m\x1b[Kconst std::complex<_Tp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.618235] (pc_merger) StderrLine: {'line': b'  123 |     combined_publisher_->publish(*\x1b[01;36m\x1b[Kcombined_msg\x1b[m\x1b[K);\n'}
[6.618806] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.619310] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:96\x1b[m\x1b[K,\n'}
[6.619748] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/StdVector:14\x1b[m\x1b[K,\n'}
[6.620282] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.10/pcl/point_cloud.h:45\x1b[m\x1b[K,\n'}
[6.620711] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8\x1b[m\x1b[K,\n'}
[6.621262] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.621857] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:409:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const _Tp&, const std::complex<_Tp>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.622792] (pc_merger) StderrLine: {'line': b'  409 |     \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K*(const _Tp& __x, const complex<_Tp>& __y)\n'}
[6.623576] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.624224] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:409:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.625023] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 2 arguments, 1 provided\n'}
[6.626659] (pc_merger) StderrLine: {'line': b'  123 |     combined_publisher_->publish(*\x1b[01;36m\x1b[Kcombined_msg\x1b[m\x1b[K);\n'}
[6.627483] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.627981] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In function \xe2\x80\x98\x1b[01m\x1b[Kint main(int, char**)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.628423] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:128:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KPointCloudCombinerNode\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[KPointCloudCombiner\x1b[m\x1b[K\xe2\x80\x99?\n'}
[6.629152] (pc_merger) StderrLine: {'line': b'  128 |   rclcpp::spin(std::make_shared<\x1b[01;31m\x1b[KPointCloudCombinerNode\x1b[m\x1b[K>("point_cloud_combiner"));\n'}
[6.630619] (pc_merger) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.631649] (pc_merger) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[KPointCloudCombiner\x1b[m\x1b[K\n'}
[6.632882] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:128:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kmake_shared<<expression error> >(const char [21])\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.634298] (pc_merger) StderrLine: {'line': b'  128 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"\x1b[01;31m\x1b[K)\x1b[m\x1b[K);\n'}
[6.634920] (pc_merger) StderrLine: {'line': b'      |                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[6.635451] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/9/memory:81\x1b[m\x1b[K,\n'}
[6.636078] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:154\x1b[m\x1b[K,\n'}
[6.636573] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[6.637087] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[6.637528] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:714:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::shared_ptr<_Tp> std::make_shared(_Args&& ...)\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.638044] (pc_merger) StderrLine: {'line': b'  714 |     \x1b[01;36m\x1b[Kmake_shared\x1b[m\x1b[K(_Args&&... __args)\n'}
[6.638610] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.639071] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:714:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.639518] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:128:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[6.640072] (pc_merger) StderrLine: {'line': b'  128 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"\x1b[01;31m\x1b[K)\x1b[m\x1b[K);\n'}
[6.640579] (pc_merger) StderrLine: {'line': b'      |                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[6.665668] (-) TimerEvent: {}
[6.767287] (-) TimerEvent: {}
[6.868179] (-) TimerEvent: {}
[6.968789] (-) TimerEvent: {}
[7.069415] (-) TimerEvent: {}
[7.176046] (-) TimerEvent: {}
[7.277684] (-) TimerEvent: {}
[7.378551] (-) TimerEvent: {}
[7.480047] (-) TimerEvent: {}
[7.584198] (-) TimerEvent: {}
[7.685265] (-) TimerEvent: {}
[7.785796] (-) TimerEvent: {}
[7.888036] (-) TimerEvent: {}
[7.934908] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29\x1b[m\x1b[K,\n'}
[7.935897] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26\x1b[m\x1b[K,\n'}
[7.936480] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[7.936936] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[7.937534] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[7.938020] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[7.938613] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[7.940171] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[7.941066] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[7.941704] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[7.942212] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[7.942665] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[7.945621] (pc_merger) StderrLine: {'line': b'/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.947274] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.948059] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.948817] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.949451] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.950257] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:129:\x1b[m\x1b[K   required from here\n'}
[7.950917] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[7.951667] (pc_merger) StderrLine: {'line': b'  185 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[7.952053] (pc_merger) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.952456] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:23\x1b[m\x1b[K,\n'}
[7.952827] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29\x1b[m\x1b[K,\n'}
[7.953179] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26\x1b[m\x1b[K,\n'}
[7.953532] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[7.954038] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[7.954555] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[7.955069] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[7.955464] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[7.955821] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[7.956180] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[7.956573] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[7.956998] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[7.957430] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[7.958002] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1299:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.958567] (pc_merger) StderrLine: {'line': b' 1299 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[7.959045] (pc_merger) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.959448] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1299:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.959945] (pc_merger) StderrLine: {'line': b' 1299 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[7.960301] (pc_merger) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.960650] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1300:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.961093] (pc_merger) StderrLine: {'line': b' 1300 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[7.961427] (pc_merger) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.961764] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1300:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.962231] (pc_merger) StderrLine: {'line': b' 1300 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[7.962619] (pc_merger) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[7.963013] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1362:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.963526] (pc_merger) StderrLine: {'line': b' 1362 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[7.963878] (pc_merger) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.964225] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1362:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.964575] (pc_merger) StderrLine: {'line': b'/usr/include/c++/9/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.965022] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1358:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.965784] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.966311] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.966799] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.967303] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.967792] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.968277] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:129:\x1b[m\x1b[K   required from here\n'}
[7.968661] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1276:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.969120] (pc_merger) StderrLine: {'line': b' 1276 |  using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[7.969598] (pc_merger) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.990119] (-) TimerEvent: {}
[8.093190] (-) TimerEvent: {}
[8.193758] (-) TimerEvent: {}
[8.294864] (-) TimerEvent: {}
[8.396105] (-) TimerEvent: {}
[8.498216] (-) TimerEvent: {}
[8.601133] (-) TimerEvent: {}
[8.704109] (-) TimerEvent: {}
[8.805279] (-) TimerEvent: {}
[8.905953] (-) TimerEvent: {}
[9.006956] (-) TimerEvent: {}
[9.109195] (-) TimerEvent: {}
[9.212317] (-) TimerEvent: {}
[9.313028] (-) TimerEvent: {}
[9.413801] (-) TimerEvent: {}
[9.471614] (pc_merger) StderrLine: {'line': b'make[2]: *** [CMakeFiles/pc_merger.dir/build.make:63: CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o] Error 1\n'}
[9.472633] (pc_merger) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/pc_merger.dir/all] Error 2\n'}
[9.474625] (pc_merger) StderrLine: {'line': b'make: *** [Makefile:141: all] Error 2\n'}
[9.477348] (pc_merger) CommandEnded: {'returncode': 2}
[9.514013] (-) TimerEvent: {}
[9.527891] (pc_merger) JobEnded: {'identifier': 'pc_merger', 'rc': 2}
[9.539873] (-) EventReactorShutdown: {}
