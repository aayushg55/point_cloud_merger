[0.000000] (-) TimerEvent: {}
[0.000294] (pc_merger) JobQueued: {'identifier': 'pc_merger', 'dependencies': OrderedDict()}
[0.000588] (pc_merger) JobStarted: {'identifier': 'pc_merger'}
[0.013224] (pc_merger) JobProgress: {'identifier': 'pc_merger', 'progress': 'cmake'}
[0.017777] (pc_merger) JobProgress: {'identifier': 'pc_merger', 'progress': 'build'}
[0.018597] (pc_merger) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger', '--', '-j8', '-l8'], 'cwd': '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger', 'env': OrderedDict([('USER', 'ubuntu'), ('HOSTNAME', 'd60cd71c3916'), ('GIT_ASKPASS', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/extensions/git/dist/askpass.sh'), ('SHLVL', '2'), ('LD_LIBRARY_PATH', '/usr/lib/aarch64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/aarch64-linux-gnu:/opt/ros/galactic/lib'), ('BROWSER', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/bin/helpers/browser.sh'), ('HOME', '/home/ubuntu'), ('OLDPWD', '/home/ubuntu/bags'), ('TERM_PROGRAM_VERSION', '1.84.2'), ('VSCODE_IPC_HOOK_CLI', '/tmp/vscode-ipc-ddd2bd13-8b1c-4022-bebd-63f3d0ac1f6e.sock'), ('ROS_PYTHON_VERSION', '3'), ('VSCODE_GIT_ASKPASS_MAIN', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/node'), ('LC_CTYPE', 'C.UTF-8'), ('COLORTERM', 'truecolor'), ('REMOTE_CONTAINERS', 'true'), ('ROS_DISTRO', 'galactic'), ('REMOTE_CONTAINERS_IPC', '/tmp/vscode-remote-containers-ipc-02bb064f-03c9-435f-ae1e-65a7c36f8dd8.sock'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('TERM', 'xterm-256color'), ('ROS_LOCALHOST_ONLY', '0'), ('QT_X11_NO_MITSHM', '1'), ('PATH', '/home/ubuntu/.vscode-server/bin/1a5daa3a0231a0fbba4f14db7ec463cf99d7768e/bin/remote-cli:/opt/ros/galactic/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin'), ('REMOTE_CONTAINERS_SOCKETS', '["/tmp/vscode-ssh-auth-02bb064f-03c9-435f-ae1e-65a7c36f8dd8.sock","/tmp/.X11-unix/X4"]'), ('DISPLAY', ':4'), ('LANG', 'en_US.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/tmp/vscode-git-001cbcc4a2.sock'), ('TERM_PROGRAM', 'vscode'), ('SSH_AUTH_SOCK', '/tmp/vscode-ssh-auth-02bb064f-03c9-435f-ae1e-65a7c36f8dd8.sock'), ('AMENT_PREFIX_PATH', '/opt/ros/galactic'), ('DEBIAN_FRONTEND', 'noninteractive'), ('REMOTE_CONTAINERS_DISPLAY_SOCK', '/tmp/.X11-unix/X4'), ('SHELL', '/bin/bash'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('PWD', '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger'), ('XDG_DATA_DIRS', '/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/galactic/lib/python3.8/site-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/opt/ros/galactic')]), 'shell': False}
[0.093417] (pc_merger) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target pc_merger\x1b[0m\n'}
[0.099475] (-) TimerEvent: {}
[0.200329] (-) TimerEvent: {}
[0.301082] (-) TimerEvent: {}
[0.401630] (-) TimerEvent: {}
[0.502454] (-) TimerEvent: {}
[0.604095] (-) TimerEvent: {}
[0.704795] (-) TimerEvent: {}
[0.805333] (-) TimerEvent: {}
[0.905817] (-) TimerEvent: {}
[1.006248] (-) TimerEvent: {}
[1.107603] (-) TimerEvent: {}
[1.208769] (-) TimerEvent: {}
[1.309687] (-) TimerEvent: {}
[1.410173] (-) TimerEvent: {}
[1.469346] (pc_merger) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o\x1b[0m\n'}
[1.510400] (-) TimerEvent: {}
[1.610931] (-) TimerEvent: {}
[1.711972] (-) TimerEvent: {}
[1.813023] (-) TimerEvent: {}
[1.913495] (-) TimerEvent: {}
[2.014166] (-) TimerEvent: {}
[2.115199] (-) TimerEvent: {}
[2.216876] (-) TimerEvent: {}
[2.318950] (-) TimerEvent: {}
[2.419528] (-) TimerEvent: {}
[2.520166] (-) TimerEvent: {}
[2.620727] (-) TimerEvent: {}
[2.721257] (-) TimerEvent: {}
[2.821679] (-) TimerEvent: {}
[2.923327] (-) TimerEvent: {}
[3.023942] (-) TimerEvent: {}
[3.124530] (-) TimerEvent: {}
[3.226966] (-) TimerEvent: {}
[3.328261] (-) TimerEvent: {}
[3.428831] (-) TimerEvent: {}
[3.529920] (-) TimerEvent: {}
[3.631763] (-) TimerEvent: {}
[3.732859] (-) TimerEvent: {}
[3.835094] (-) TimerEvent: {}
[3.937081] (-) TimerEvent: {}
[4.038891] (-) TimerEvent: {}
[4.140228] (-) TimerEvent: {}
[4.240809] (-) TimerEvent: {}
[4.341642] (-) TimerEvent: {}
[4.442284] (-) TimerEvent: {}
[4.544203] (-) TimerEvent: {}
[4.644730] (-) TimerEvent: {}
[4.745386] (-) TimerEvent: {}
[4.846417] (-) TimerEvent: {}
[4.947765] (-) TimerEvent: {}
[5.049999] (-) TimerEvent: {}
[5.153155] (-) TimerEvent: {}
[5.253732] (-) TimerEvent: {}
[5.355456] (-) TimerEvent: {}
[5.457324] (-) TimerEvent: {}
[5.559013] (-) TimerEvent: {}
[5.661256] (-) TimerEvent: {}
[5.740053] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.741903] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:44:22:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kextra \xe2\x80\x98\x1b[01m\x1b[K;\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K-Wpedantic\x1b[m\x1b[K]\n'}
[5.742832] (pc_merger) StderrLine: {'line': b'   44 |     PCL_ADD_INTENSITY\x1b[01;35m\x1b[K;\x1b[m\x1b[K\n'}
[5.744924] (pc_merger) StderrLine: {'line': b'      |                      \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.746402] (pc_merger) StderrLine: {'line': b'      |                      \x1b[31m\x1b[K-\x1b[m\x1b[K\n'}
[5.762753] (-) TimerEvent: {}
[5.785902] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KPointCloudCombiner::PointCloudCombiner(const string&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.786717] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:7:50:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.787288] (pc_merger) StderrLine: {'line': b'    7 |     this->declare_parameter(PARAM_MERGED_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.787741] (pc_merger) StderrLine: {'line': b'      |                                                  \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.788208] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.788649] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.789126] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.789581] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.790077] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.790733] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.791286] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.792006] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.792742] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:8:49:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.793399] (pc_merger) StderrLine: {'line': b'    8 |     this->declare_parameter(PARAM_FRONT_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.794336] (pc_merger) StderrLine: {'line': b'      |                                                 \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.795165] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.795785] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.796383] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.796931] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.797465] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.798206] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.799230] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.799962] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.800649] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:9:48:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.801346] (pc_merger) StderrLine: {'line': b'    9 |     this->declare_parameter(PARAM_LEFT_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.801825] (pc_merger) StderrLine: {'line': b'      |                                                \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.802351] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.802816] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.803321] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.803857] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.804511] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.804967] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.805402] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.805846] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.806327] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:10:49:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.806900] (pc_merger) StderrLine: {'line': b'   10 |     this->declare_parameter(PARAM_RIGHT_PC_TOPIC\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.807400] (pc_merger) StderrLine: {'line': b'      |                                                 \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.809177] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.810630] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.811365] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.812031] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.812720] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.813351] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.813909] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.814487] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.815073] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:12:52:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.815661] (pc_merger) StderrLine: {'line': b'   12 |     this->declare_parameter(PARAM_FRONT_LIDAR_FRAME\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.816131] (pc_merger) StderrLine: {'line': b'      |                                                    \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.816646] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.817207] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.817775] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.818239] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.818724] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.819272] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.819724] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.820150] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.820697] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:13:51:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.821215] (pc_merger) StderrLine: {'line': b'   13 |     this->declare_parameter(PARAM_LEFT_LIDAR_FRAME\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.821661] (pc_merger) StderrLine: {'line': b'      |                                                   \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.822192] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.822631] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.823088] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.823511] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.823923] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.824357] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.825721] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.826175] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.826703] (pc_merger) StderrLine: {'line': b"\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:14:52:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)\x1b[m\x1b[K\xe2\x80\x99 is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\\nIf you want to declare a parameter that won't change type without a default value use:\\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\\n\\nIf you want to declare a parameter that can dynamically change type use:\\n```\\nrcl_interfaces::msg::ParameterDescriptor descriptor;\\ndescriptor.dynamic_typing = true;\\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\\n``` [\x1b[01;35m\x1b[K-Wdeprecated-declarations\x1b[m\x1b[K]\n"}
[5.827143] (pc_merger) StderrLine: {'line': b'   14 |     this->declare_parameter(PARAM_RIGHT_LIDAR_FRAME\x1b[01;35m\x1b[K)\x1b[m\x1b[K;\n'}
[5.827573] (pc_merger) StderrLine: {'line': b'      |                                                    \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[5.828108] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[5.829531] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[5.830075] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[5.830677] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.831155] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.831608] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclared here\n'}
[5.832039] (pc_merger) StderrLine: {'line': b'  422 |   \x1b[01;36m\x1b[Kdeclare_parameter\x1b[m\x1b[K(const std::string & name);\n'}
[5.832506] (pc_merger) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.832938] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:52:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kfront_subscriber_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kront_subscriber_\x1b[m\x1b[K\xe2\x80\x99?\n'}
[5.833439] (pc_merger) StderrLine: {'line': b'   52 |     \x1b[01;31m\x1b[Kfront_subscriber_\x1b[m\x1b[K = this->create_subscription<sensor_msgs::msg::PointCloud2>(\n'}
[5.834072] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.834560] (pc_merger) StderrLine: {'line': b'      |     \x1b[32m\x1b[Kront_subscriber_\x1b[m\x1b[K\n'}
[5.834975] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:45:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99 does not name a type\n'}
[5.835461] (pc_merger) StderrLine: {'line': b'   54 |     std::function<void(const std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K::SharedPtr msg)> cb_front = std::bind(\n'}
[5.835948] (pc_merger) StderrLine: {'line': b'      |                                             \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[5.836390] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.836783] (pc_merger) StderrLine: {'line': b'   54 |     std::function<void(const std_msgs::msg::String::SharedPtr \x1b[01;31m\x1b[Kmsg\x1b[m\x1b[K)> cb_front = std::bind(\n'}
[5.837204] (pc_merger) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~~\x1b[m\x1b[K\n'}
[5.837614] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.838030] (pc_merger) StderrLine: {'line': b'   54 |     std::function<void\x1b[34m\x1b[K(\x1b[m\x1b[Kconst std_msgs::msg::String::SharedPtr\x1b[01;31m\x1b[K \x1b[m\x1b[K\x1b[32m\x1b[Kmsg\x1b[m\x1b[K)> cb_front = std::bind(\n'}
[5.838453] (pc_merger) StderrLine: {'line': b'      |                       \x1b[34m\x1b[K~\x1b[m\x1b[K                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\x1b[32m\x1b[K~~~\x1b[m\x1b[K\n'}
[5.838960] (pc_merger) StderrLine: {'line': b'      |                                                              \x1b[32m\x1b[K)\x1b[m\x1b[K\n'}
[5.839462] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected template-argument before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.842142] (pc_merger) StderrLine: {'line': b'   54 |     std::function<void(const std_msgs::msg::String::SharedPtr \x1b[01;31m\x1b[Kmsg\x1b[m\x1b[K)> cb_front = std::bind(\n'}
[5.842831] (pc_merger) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~~\x1b[m\x1b[K\n'}
[5.843421] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.843900] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:54:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[5.844339] (pc_merger) StderrLine: {'line': b'   54 |     std::function<void(const std_msgs::msg::String::SharedPtr msg\x1b[01;31m\x1b[K)\x1b[m\x1b[K> cb_front = std::bind(\n'}
[5.844780] (pc_merger) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[5.845248] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:45:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99 does not name a type\n'}
[5.845836] (pc_merger) StderrLine: {'line': b'   56 |     std::function<void(const std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K::SharedPtr msg)> cb_left = std::bind(\n'}
[5.846327] (pc_merger) StderrLine: {'line': b'      |                                             \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[5.846807] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.847311] (pc_merger) StderrLine: {'line': b'   56 |     std::function<void(const std_msgs::msg::String::SharedPtr \x1b[01;31m\x1b[Kmsg\x1b[m\x1b[K)> cb_left = std::bind(\n'}
[5.847774] (pc_merger) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~~\x1b[m\x1b[K\n'}
[5.848203] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.848647] (pc_merger) StderrLine: {'line': b'   56 |     std::function<void\x1b[34m\x1b[K(\x1b[m\x1b[Kconst std_msgs::msg::String::SharedPtr\x1b[01;31m\x1b[K \x1b[m\x1b[K\x1b[32m\x1b[Kmsg\x1b[m\x1b[K)> cb_left = std::bind(\n'}
[5.849078] (pc_merger) StderrLine: {'line': b'      |                       \x1b[34m\x1b[K~\x1b[m\x1b[K                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\x1b[32m\x1b[K~~~\x1b[m\x1b[K\n'}
[5.849494] (pc_merger) StderrLine: {'line': b'      |                                                              \x1b[32m\x1b[K)\x1b[m\x1b[K\n'}
[5.849962] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected template-argument before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.850377] (pc_merger) StderrLine: {'line': b'   56 |     std::function<void(const std_msgs::msg::String::SharedPtr \x1b[01;31m\x1b[Kmsg\x1b[m\x1b[K)> cb_left = std::bind(\n'}
[5.850776] (pc_merger) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~~\x1b[m\x1b[K\n'}
[5.851302] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.851809] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:56:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[5.852360] (pc_merger) StderrLine: {'line': b'   56 |     std::function<void(const std_msgs::msg::String::SharedPtr msg\x1b[01;31m\x1b[K)\x1b[m\x1b[K> cb_left = std::bind(\n'}
[5.852837] (pc_merger) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[5.853357] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:45:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99 does not name a type\n'}
[5.853802] (pc_merger) StderrLine: {'line': b'   58 |     std::function<void(const std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K::SharedPtr msg)> cb_right = std::bind(\n'}
[5.854289] (pc_merger) StderrLine: {'line': b'      |                                             \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[5.854839] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.855263] (pc_merger) StderrLine: {'line': b'   58 |     std::function<void(const std_msgs::msg::String::SharedPtr \x1b[01;31m\x1b[Kmsg\x1b[m\x1b[K)> cb_right = std::bind(\n'}
[5.855705] (pc_merger) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~~\x1b[m\x1b[K\n'}
[5.856109] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.856512] (pc_merger) StderrLine: {'line': b'   58 |     std::function<void\x1b[34m\x1b[K(\x1b[m\x1b[Kconst std_msgs::msg::String::SharedPtr\x1b[01;31m\x1b[K \x1b[m\x1b[K\x1b[32m\x1b[Kmsg\x1b[m\x1b[K)> cb_right = std::bind(\n'}
[5.856931] (pc_merger) StderrLine: {'line': b'      |                       \x1b[34m\x1b[K~\x1b[m\x1b[K                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\x1b[32m\x1b[K~~~\x1b[m\x1b[K\n'}
[5.857415] (pc_merger) StderrLine: {'line': b'      |                                                              \x1b[32m\x1b[K)\x1b[m\x1b[K\n'}
[5.857902] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected template-argument before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.858426] (pc_merger) StderrLine: {'line': b'   58 |     std::function<void(const std_msgs::msg::String::SharedPtr \x1b[01;31m\x1b[Kmsg\x1b[m\x1b[K)> cb_right = std::bind(\n'}
[5.859042] (pc_merger) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~~\x1b[m\x1b[K\n'}
[5.859562] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.861101] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:58:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[5.861850] (pc_merger) StderrLine: {'line': b'   58 |     std::function<void(const std_msgs::msg::String::SharedPtr msg\x1b[01;31m\x1b[K)\x1b[m\x1b[K> cb_right = std::bind(\n'}
[5.862542] (pc_merger) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[5.863137] (-) TimerEvent: {}
[5.863349] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:65:40:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcb_right\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[5.863961] (pc_merger) StderrLine: {'line': b'   65 |         right_pc_topic_, qos_profile, (\x1b[01;31m\x1b[Kcb_right\x1b[m\x1b[K));\n'}
[5.864620] (pc_merger) StderrLine: {'line': b'      |                                        \x1b[01;31m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.865717] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:67:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcb_left\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[5.866326] (pc_merger) StderrLine: {'line': b'   67 |         left_pc_topic_, qos_profile, (\x1b[01;31m\x1b[Kcb_left\x1b[m\x1b[K));\n'}
[5.866865] (pc_merger) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[5.867452] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K At global scope:\n'}
[5.867937] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:78:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno declaration matches \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<PointXYZIRT>::Ptr PointCloudCombiner::getTargetCloud(const string&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.868405] (pc_merger) StderrLine: {'line': b'   78 | pcl::PointCloud<PointXYZIRT>::Ptr \x1b[01;31m\x1b[KPointCloudCombiner\x1b[m\x1b[K::getTargetCloud(const std::string& topic) {\n'}
[5.868934] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.869412] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:78:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kno functions named \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<PointXYZIRT>::Ptr PointCloudCombiner::getTargetCloud(const string&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.869912] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.870730] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:76:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kclass PointCloudCombiner\x1b[m\x1b[K\xe2\x80\x99 defined here\n'}
[5.872705] (pc_merger) StderrLine: {'line': b'   76 | class \x1b[01;36m\x1b[KPointCloudCombiner\x1b[m\x1b[K : public rclcpp::Node {\n'}
[5.874218] (pc_merger) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.874777] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid PointCloudCombiner::cloudHandler(sensor_msgs::msg::PointCloud2_<std::allocator<void> >::SharedPtr, std::string)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.875303] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:94:24:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KgetTargetCloud\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[KtargetCloud\x1b[m\x1b[K\xe2\x80\x99?\n'}
[5.875728] (pc_merger) StderrLine: {'line': b'   94 |     auto targetCloud = \x1b[01;31m\x1b[KgetTargetCloud\x1b[m\x1b[K(topicName);\n'}
[5.876223] (pc_merger) StderrLine: {'line': b'      |                        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.876684] (pc_merger) StderrLine: {'line': b'      |                        \x1b[32m\x1b[KtargetCloud\x1b[m\x1b[K\n'}
[5.877153] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:100:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kpcl_ros\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[5.877591] (pc_merger) StderrLine: {'line': b'  100 |     \x1b[01;31m\x1b[Kpcl_ros\x1b[m\x1b[K::transformPointCloud(front_lidar_frame_, *targetCloud, *targetCloud, tf_listener_);\n'}
[5.878051] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[5.878474] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid PointCloudCombiner::publishCombinedPointCloud(rclcpp::Time)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.878910] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:112:6:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kmerged_cloud\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kmerged_cloud_\x1b[m\x1b[K\xe2\x80\x99?\n'}
[5.879532] (pc_merger) StderrLine: {'line': b'  112 |     *\x1b[01;31m\x1b[Kmerged_cloud\x1b[m\x1b[K += *right_cloud_;\n'}
[5.879997] (pc_merger) StderrLine: {'line': b'      |      \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.880490] (pc_merger) StderrLine: {'line': b'      |      \x1b[32m\x1b[Kmerged_cloud_\x1b[m\x1b[K\n'}
[5.881135] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:116:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcombined_point_cloud_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[5.881770] (pc_merger) StderrLine: {'line': b'  116 |     pcl::toROSMsg(*\x1b[01;31m\x1b[Kcombined_point_cloud_\x1b[m\x1b[K, combined_msg);\n'}
[5.882365] (pc_merger) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.882953] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator*\x1b[m\x1b[K\xe2\x80\x99 (operand type is \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99})\n'}
[5.883623] (pc_merger) StderrLine: {'line': b'  119 |     combined_publisher_->publish(\x1b[01;31m\x1b[K*combined_msg\x1b[m\x1b[K);\n'}
[5.884206] (pc_merger) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.884698] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:96\x1b[m\x1b[K,\n'}
[5.885120] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/StdVector:14\x1b[m\x1b[K,\n'}
[5.885651] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.10/pcl/point_cloud.h:45\x1b[m\x1b[K,\n'}
[5.886151] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8\x1b[m\x1b[K,\n'}
[5.886665] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.887113] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:391:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const std::complex<_Tp>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.887650] (pc_merger) StderrLine: {'line': b'  391 |     \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K*(const complex<_Tp>& __x, const complex<_Tp>& __y)\n'}
[5.888134] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.889690] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:391:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.890178] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} is not derived from \xe2\x80\x98\x1b[01m\x1b[Kconst std::complex<_Tp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.890835] (pc_merger) StderrLine: {'line': b'  119 |     combined_publisher_->publish(*\x1b[01;36m\x1b[Kcombined_msg\x1b[m\x1b[K);\n'}
[5.891431] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.892929] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:96\x1b[m\x1b[K,\n'}
[5.893611] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/StdVector:14\x1b[m\x1b[K,\n'}
[5.894380] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.10/pcl/point_cloud.h:45\x1b[m\x1b[K,\n'}
[5.894887] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8\x1b[m\x1b[K,\n'}
[5.895344] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.895774] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:400:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const _Tp&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.896217] (pc_merger) StderrLine: {'line': b'  400 |     \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K*(const complex<_Tp>& __x, const _Tp& __y)\n'}
[5.896650] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.897090] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:400:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.897534] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} is not derived from \xe2\x80\x98\x1b[01m\x1b[Kconst std::complex<_Tp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.897962] (pc_merger) StderrLine: {'line': b'  119 |     combined_publisher_->publish(*\x1b[01;36m\x1b[Kcombined_msg\x1b[m\x1b[K);\n'}
[5.898490] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.898943] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/Core:96\x1b[m\x1b[K,\n'}
[5.899393] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/eigen3/Eigen/StdVector:14\x1b[m\x1b[K,\n'}
[5.899841] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.10/pcl/point_cloud.h:45\x1b[m\x1b[K,\n'}
[5.900264] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8\x1b[m\x1b[K,\n'}
[5.900678] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.901157] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:409:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const _Tp&, const std::complex<_Tp>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.901665] (pc_merger) StderrLine: {'line': b'  409 |     \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K*(const _Tp& __x, const complex<_Tp>& __y)\n'}
[5.902235] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.902897] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/complex:409:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.905709] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:119:35:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 2 arguments, 1 provided\n'}
[5.906461] (pc_merger) StderrLine: {'line': b'  119 |     combined_publisher_->publish(*\x1b[01;36m\x1b[Kcombined_msg\x1b[m\x1b[K);\n'}
[5.906911] (pc_merger) StderrLine: {'line': b'      |                                   \x1b[01;36m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.907548] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:\x1b[m\x1b[K In function \xe2\x80\x98\x1b[01m\x1b[Kint main(int, char**)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.908070] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:124:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KPointCloudCombinerNode\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[KPointCloudCombiner\x1b[m\x1b[K\xe2\x80\x99?\n'}
[5.908538] (pc_merger) StderrLine: {'line': b'  124 |   rclcpp::spin(std::make_shared<\x1b[01;31m\x1b[KPointCloudCombinerNode\x1b[m\x1b[K>("point_cloud_combiner"));\n'}
[5.908961] (pc_merger) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.909405] (pc_merger) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[KPointCloudCombiner\x1b[m\x1b[K\n'}
[5.909839] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:124:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kmake_shared<<expression error> >(const char [21])\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.910267] (pc_merger) StderrLine: {'line': b'  124 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"\x1b[01;31m\x1b[K)\x1b[m\x1b[K);\n'}
[5.910707] (pc_merger) StderrLine: {'line': b'      |                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[5.911124] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/9/memory:81\x1b[m\x1b[K,\n'}
[5.911554] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:154\x1b[m\x1b[K,\n'}
[5.912006] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[5.912437] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[5.912853] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:714:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp, class ... _Args> std::shared_ptr<_Tp> std::make_shared(_Args&& ...)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.913337] (pc_merger) StderrLine: {'line': b'  714 |     \x1b[01;36m\x1b[Kmake_shared\x1b[m\x1b[K(_Args&&... __args)\n'}
[5.913760] (pc_merger) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.914169] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/bits/shared_ptr.h:714:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.914648] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:124:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[5.915060] (pc_merger) StderrLine: {'line': b'  124 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"\x1b[01;31m\x1b[K)\x1b[m\x1b[K);\n'}
[5.915482] (pc_merger) StderrLine: {'line': b'      |                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[5.964101] (-) TimerEvent: {}
[6.064937] (-) TimerEvent: {}
[6.166995] (-) TimerEvent: {}
[6.268720] (-) TimerEvent: {}
[6.369336] (-) TimerEvent: {}
[6.470029] (-) TimerEvent: {}
[6.570811] (-) TimerEvent: {}
[6.672231] (-) TimerEvent: {}
[6.773015] (-) TimerEvent: {}
[6.875036] (-) TimerEvent: {}
[6.976095] (-) TimerEvent: {}
[7.076678] (-) TimerEvent: {}
[7.084508] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29\x1b[m\x1b[K,\n'}
[7.085527] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26\x1b[m\x1b[K,\n'}
[7.086091] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[7.086563] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[7.087100] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[7.088836] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[7.090051] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[7.090852] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[7.091453] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[7.092042] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[7.092684] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[7.093211] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[7.093736] (pc_merger) StderrLine: {'line': b'/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.094136] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.094589] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.095308] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.095833] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.096283] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:121:\x1b[m\x1b[K   required from here\n'}
[7.096692] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[7.097294] (pc_merger) StderrLine: {'line': b'  185 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[7.097742] (pc_merger) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.098148] (pc_merger) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:23\x1b[m\x1b[K,\n'}
[7.098643] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29\x1b[m\x1b[K,\n'}
[7.099051] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26\x1b[m\x1b[K,\n'}
[7.099475] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[7.099883] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[7.100295] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[7.100716] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[7.101126] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executor.hpp:36\x1b[m\x1b[K,\n'}
[7.101632] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[7.102306] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[7.102942] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156\x1b[m\x1b[K,\n'}
[7.103516] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5\x1b[m\x1b[K,\n'}
[7.104121] (pc_merger) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1\x1b[m\x1b[K:\n'}
[7.104697] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1299:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.105450] (pc_merger) StderrLine: {'line': b' 1299 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[7.106954] (pc_merger) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.107501] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1299:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.108092] (pc_merger) StderrLine: {'line': b' 1299 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[7.108577] (pc_merger) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.109202] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1300:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.110778] (pc_merger) StderrLine: {'line': b' 1300 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[7.111416] (pc_merger) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.111904] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1300:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.112605] (pc_merger) StderrLine: {'line': b' 1300 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[7.113049] (pc_merger) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[7.113508] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1362:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.113951] (pc_merger) StderrLine: {'line': b' 1362 |  \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[7.114386] (pc_merger) StderrLine: {'line': b'      |  \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.114796] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1362:2:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.115227] (pc_merger) StderrLine: {'line': b'/usr/include/c++/9/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.115944] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1358:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.116785] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.117240] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.117871] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.118305] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.118904] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.119630] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:121:\x1b[m\x1b[K   required from here\n'}
[7.121467] (pc_merger) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/9/variant:1276:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.122961] (pc_merger) StderrLine: {'line': b' 1276 |  using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[7.123579] (pc_merger) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.177053] (-) TimerEvent: {}
[7.277532] (-) TimerEvent: {}
[7.378052] (-) TimerEvent: {}
[7.479926] (-) TimerEvent: {}
[7.581636] (-) TimerEvent: {}
[7.683718] (-) TimerEvent: {}
[7.785426] (-) TimerEvent: {}
[7.886044] (-) TimerEvent: {}
[7.986829] (-) TimerEvent: {}
[8.087481] (-) TimerEvent: {}
[8.188402] (-) TimerEvent: {}
[8.289990] (-) TimerEvent: {}
[8.390533] (-) TimerEvent: {}
[8.491835] (-) TimerEvent: {}
[8.592599] (-) TimerEvent: {}
[8.645907] (pc_merger) StderrLine: {'line': b'make[2]: *** [CMakeFiles/pc_merger.dir/build.make:63: CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o] Error 1\n'}
[8.646750] (pc_merger) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/pc_merger.dir/all] Error 2\n'}
[8.647652] (pc_merger) StderrLine: {'line': b'make: *** [Makefile:141: all] Error 2\n'}
[8.650098] (pc_merger) CommandEnded: {'returncode': 2}
[8.693355] (-) TimerEvent: {}
[8.698949] (pc_merger) JobEnded: {'identifier': 'pc_merger', 'rc': 2}
[8.710098] (-) EventReactorShutdown: {}
