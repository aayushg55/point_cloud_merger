[0.018s] Invoking command in '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/ubuntu/bags/pc_merger_ws/src/build/pc_merger -- -j8 -l8
[0.081s] [35m[1mScanning dependencies of target pc_merger[0m
[1.596s] [ 50%] [32mBuilding CXX object CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o[0m
[6.490s] In file included from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.491s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:44:22:[m[K [01;35m[Kwarning: [m[Kextra â€˜[01m[K;[m[Kâ€™ [[01;35m[K-Wpedantic[m[K]
[6.492s]    44 |     PCL_ADD_INTENSITY[01;35m[K;[m[K
[6.492s]       |                      [01;35m[K^[m[K
[6.493s]       |                      [31m[K-[m[K
[6.540s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In constructor â€˜[01m[KPointCloudCombiner::PointCloudCombiner(const string&)[m[Kâ€™:
[6.540s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:7:50:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.541s]     7 |     this->declare_parameter(PARAM_MERGED_PC_TOPIC[01;35m[K)[m[K;
[6.541s]       |                                                  [01;35m[K^[m[K
[6.542s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.542s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.543s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.543s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.545s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.545s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.546s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.547s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.547s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:8:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.548s]     8 |     this->declare_parameter(PARAM_FRONT_PC_TOPIC[01;35m[K)[m[K;
[6.549s]       |                                                 [01;35m[K^[m[K
[6.549s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.550s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.550s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.551s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.551s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.552s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.553s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.553s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.554s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:9:48:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.555s]     9 |     this->declare_parameter(PARAM_LEFT_PC_TOPIC[01;35m[K)[m[K;
[6.555s]       |                                                [01;35m[K^[m[K
[6.556s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.556s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.557s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.558s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.560s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.560s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.561s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.561s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.562s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:10:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.562s]    10 |     this->declare_parameter(PARAM_RIGHT_PC_TOPIC[01;35m[K)[m[K;
[6.563s]       |                                                 [01;35m[K^[m[K
[6.563s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.564s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.564s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.565s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.566s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.566s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.567s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.567s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.568s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:12:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.568s]    12 |     this->declare_parameter(PARAM_FRONT_LIDAR_FRAME[01;35m[K)[m[K;
[6.569s]       |                                                    [01;35m[K^[m[K
[6.569s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.570s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.570s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.571s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.571s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.572s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.572s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.573s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.574s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:13:51:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.574s]    13 |     this->declare_parameter(PARAM_LEFT_LIDAR_FRAME[01;35m[K)[m[K;
[6.575s]       |                                                   [01;35m[K^[m[K
[6.575s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.576s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.576s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.577s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.578s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.579s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.579s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.579s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.580s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:14:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.580s]    14 |     this->declare_parameter(PARAM_RIGHT_LIDAR_FRAME[01;35m[K)[m[K;
[6.581s]       |                                                    [01;35m[K^[m[K
[6.582s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.582s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.583s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.583s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.584s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.584s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.584s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.585s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.585s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In member function â€˜[01m[Kvoid PointCloudCombiner::cloudHandler(sensor_msgs::msg::PointCloud2_<std::allocator<void> >::SharedPtr, std::string)[m[Kâ€™:
[6.586s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:104:5:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kpcl_ros[m[Kâ€™ has not been declared
[6.586s]   104 |     [01;31m[Kpcl_ros[m[K::transformPointCloud(front_lidar_frame_, *targetCloud, *targetCloud, tf_listener_);
[6.586s]       |     [01;31m[K^~~~~~~[m[K
[6.587s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In member function â€˜[01m[Kvoid PointCloudCombiner::publishCombinedPointCloud(rclcpp::Time)[m[Kâ€™:
[6.587s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:116:6:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kmerged_cloud[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[Kmerged_cloud_[m[Kâ€™?
[6.588s]   116 |     *[01;31m[Kmerged_cloud[m[K += *right_cloud_;
[6.588s]       |      [01;31m[K^~~~~~~~~~~~[m[K
[6.588s]       |      [32m[Kmerged_cloud_[m[K
[6.589s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:120:20:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcombined_point_cloud_[m[Kâ€™ was not declared in this scope
[6.589s]   120 |     pcl::toROSMsg(*[01;31m[Kcombined_point_cloud_[m[K, combined_msg);
[6.590s]       |                    [01;31m[K^~~~~~~~~~~~~~~~~~~~~[m[K
[6.590s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:34:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator*[m[Kâ€™ (operand type is â€˜[01m[Ksensor_msgs::msg::PointCloud2[m[Kâ€™ {aka â€˜[01m[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >[m[Kâ€™})
[6.591s]   123 |     combined_publisher_->publish([01;31m[K*combined_msg[m[K);
[6.592s]       |                                  [01;31m[K^~~~~~~~~~~~~[m[K
[6.593s] In file included from [01m[K/usr/include/eigen3/Eigen/Core:96[m[K,
[6.594s]                  from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
[6.594s]                  from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
[6.595s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8[m[K,
[6.595s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.596s] [01m[K/usr/include/c++/9/complex:391:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const std::complex<_Tp>&)[m[Kâ€™
[6.597s]   391 |     [01;36m[Koperator[m[K*(const complex<_Tp>& __x, const complex<_Tp>& __y)
[6.597s]       |     [01;36m[K^~~~~~~~[m[K
[6.598s] [01m[K/usr/include/c++/9/complex:391:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[6.599s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:35:[m[K [01;36m[Knote: [m[K  â€˜[01m[Ksensor_msgs::msg::PointCloud2[m[Kâ€™ {aka â€˜[01m[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >[m[Kâ€™} is not derived from â€˜[01m[Kconst std::complex<_Tp>[m[Kâ€™
[6.599s]   123 |     combined_publisher_->publish(*[01;36m[Kcombined_msg[m[K);
[6.600s]       |                                   [01;36m[K^~~~~~~~~~~~[m[K
[6.600s] In file included from [01m[K/usr/include/eigen3/Eigen/Core:96[m[K,
[6.601s]                  from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
[6.601s]                  from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
[6.602s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8[m[K,
[6.603s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.603s] [01m[K/usr/include/c++/9/complex:400:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const std::complex<_Tp>&, const _Tp&)[m[Kâ€™
[6.604s]   400 |     [01;36m[Koperator[m[K*(const complex<_Tp>& __x, const _Tp& __y)
[6.604s]       |     [01;36m[K^~~~~~~~[m[K
[6.605s] [01m[K/usr/include/c++/9/complex:400:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[6.605s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:35:[m[K [01;36m[Knote: [m[K  â€˜[01m[Ksensor_msgs::msg::PointCloud2[m[Kâ€™ {aka â€˜[01m[Ksensor_msgs::msg::PointCloud2_<std::allocator<void> >[m[Kâ€™} is not derived from â€˜[01m[Kconst std::complex<_Tp>[m[Kâ€™
[6.606s]   123 |     combined_publisher_->publish(*[01;36m[Kcombined_msg[m[K);
[6.606s]       |                                   [01;36m[K^~~~~~~~~~~~[m[K
[6.607s] In file included from [01m[K/usr/include/eigen3/Eigen/Core:96[m[K,
[6.607s]                  from [01m[K/usr/include/eigen3/Eigen/StdVector:14[m[K,
[6.609s]                  from [01m[K/usr/include/pcl-1.10/pcl/point_cloud.h:45[m[K,
[6.609s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:8[m[K,
[6.610s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.610s] [01m[K/usr/include/c++/9/complex:409:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::complex<_Tp> std::operator*(const _Tp&, const std::complex<_Tp>&)[m[Kâ€™
[6.611s]   409 |     [01;36m[Koperator[m[K*(const _Tp& __x, const complex<_Tp>& __y)
[6.611s]       |     [01;36m[K^~~~~~~~[m[K
[6.612s] [01m[K/usr/include/c++/9/complex:409:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[6.613s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:123:35:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 1 provided
[6.613s]   123 |     combined_publisher_->publish(*[01;36m[Kcombined_msg[m[K);
[6.614s]       |                                   [01;36m[K^~~~~~~~~~~~[m[K
[6.614s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[6.615s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:128:33:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[KPointCloudCombinerNode[m[Kâ€™ was not declared in this scope; did you mean â€˜[01m[KPointCloudCombiner[m[Kâ€™?
[6.615s]   128 |   rclcpp::spin(std::make_shared<[01;31m[KPointCloudCombinerNode[m[K>("point_cloud_combiner"));
[6.616s]       |                                 [01;31m[K^~~~~~~~~~~~~~~~~~~~~~[m[K
[6.616s]       |                                 [32m[KPointCloudCombiner[m[K
[6.616s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:128:79:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kmake_shared<<expression error> >(const char [21])[m[Kâ€™
[6.617s]   128 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"[01;31m[K)[m[K);
[6.617s]       |                                                                               [01;31m[K^[m[K
[6.618s] In file included from [01m[K/usr/include/c++/9/memory:81[m[K,
[6.618s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:154[m[K,
[6.619s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.619s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.620s] [01m[K/usr/include/c++/9/bits/shared_ptr.h:714:5:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp, class ... _Args> std::shared_ptr<_Tp> std::make_shared(_Args&& ...)[m[Kâ€™
[6.620s]   714 |     [01;36m[Kmake_shared[m[K(_Args&&... __args)
[6.621s]       |     [01;36m[K^~~~~~~~~~~[m[K
[6.624s] [01m[K/usr/include/c++/9/bits/shared_ptr.h:714:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[6.625s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:128:79:[m[K [01;31m[Kerror: [m[Ktemplate argument 1 is invalid
[6.625s]   128 |   rclcpp::spin(std::make_shared<PointCloudCombinerNode>("point_cloud_combiner"[01;31m[K)[m[K);
[6.626s]       |                                                                               [01;31m[K^[m[K
[8.312s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29[m[K,
[8.313s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26[m[K,
[8.313s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[8.314s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[8.314s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[8.315s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[8.316s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[8.316s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[8.317s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[8.318s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.321s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[8.323s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[8.324s] /opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[8.325s] [01m[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.327s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.327s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.328s] [01m[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.328s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:129:[m[K   required from here
[8.329s] [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™})
[8.329s]   185 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[8.330s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[8.331s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:23[m[K,
[8.331s]                  from [01m[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29[m[K,
[8.332s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26[m[K,
[8.332s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[8.333s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[8.334s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[8.334s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[8.335s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[8.336s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[8.336s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[8.337s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.338s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[8.339s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[8.339s] [01m[K/usr/include/c++/9/variant:1299:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[8.340s]  1299 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[8.340s]       |                [01;36m[K^~~~~~~~[m[K
[8.341s] [01m[K/usr/include/c++/9/variant:1299:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[8.342s]  1299 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[8.342s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[8.343s] [01m[K/usr/include/c++/9/variant:1300:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[8.343s]  1300 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[8.344s]       |                [01;36m[K^~~~~~~~[m[K
[8.345s] [01m[K/usr/include/c++/9/variant:1300:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[8.345s]  1300 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[8.346s]       |                          [01;36m[K^~~~~~~~~[m[K
[8.346s] [01m[K/usr/include/c++/9/variant:1362:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[8.347s]  1362 |  [01;36m[Koperator[m[K=(_Tp&& __rhs)
[8.347s]       |  [01;36m[K^~~~~~~~[m[K
[8.348s] [01m[K/usr/include/c++/9/variant:1362:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[8.348s] /usr/include/c++/9/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[8.349s] [01m[K/usr/include/c++/9/variant:1358:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>][m[Kâ€™
[8.349s] [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[8.350s] [01m[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.350s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.351s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.351s] [01m[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.352s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:129:[m[K   required from here
[8.353s] [01m[K/usr/include/c++/9/variant:1276:8:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[8.356s]  1276 |  using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[8.357s]       |        [01;31m[K^~~~~~~~~~~~~~~[m[K
[9.942s] make[2]: *** [CMakeFiles/pc_merger.dir/build.make:63: CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o] Error 1
[9.943s] make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/pc_merger.dir/all] Error 2
[9.943s] make: *** [Makefile:141: all] Error 2
[9.952s] Invoked command in '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger' returned '2': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/ubuntu/bags/pc_merger_ws/src/build/pc_merger -- -j8 -l8
