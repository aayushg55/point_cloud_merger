[0.038s] Invoking command in '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/ubuntu/bags/pc_merger_ws/src/build/pc_merger -- -j8 -l8
[0.103s] [35m[1mScanning dependencies of target pc_merger[0m
[1.529s] [ 50%] [32mBuilding CXX object CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o[0m
[6.165s] In file included from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.167s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:45:22:[m[K [01;35m[Kwarning: [m[Kextra â€˜[01m[K;[m[Kâ€™ [[01;35m[K-Wpedantic[m[K]
[6.168s]    45 |     PCL_ADD_INTENSITY[01;35m[K;[m[K
[6.169s]       |                      [01;35m[K^[m[K
[6.169s]       |                      [31m[K-[m[K
[6.232s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:[m[K In constructor â€˜[01m[KPointCloudCombiner::PointCloudCombiner(const string&)[m[Kâ€™:
[6.233s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:7:50:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.234s]     7 |     this->declare_parameter(PARAM_MERGED_PC_TOPIC[01;35m[K)[m[K;
[6.234s]       |                                                  [01;35m[K^[m[K
[6.236s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.236s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.237s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.237s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.238s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.238s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.240s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.241s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.242s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:8:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.242s]     8 |     this->declare_parameter(PARAM_FRONT_PC_TOPIC[01;35m[K)[m[K;
[6.243s]       |                                                 [01;35m[K^[m[K
[6.243s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.244s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.244s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.245s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.246s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.247s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.248s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.249s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.249s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:9:48:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.250s]     9 |     this->declare_parameter(PARAM_LEFT_PC_TOPIC[01;35m[K)[m[K;
[6.251s]       |                                                [01;35m[K^[m[K
[6.252s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.252s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.253s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.253s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.253s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.254s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.254s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.255s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.255s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:10:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.255s]    10 |     this->declare_parameter(PARAM_RIGHT_PC_TOPIC[01;35m[K)[m[K;
[6.256s]       |                                                 [01;35m[K^[m[K
[6.256s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.256s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.257s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.257s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.258s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.258s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.259s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.260s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.260s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:12:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.261s]    12 |     this->declare_parameter(PARAM_FRONT_LIDAR_FRAME[01;35m[K)[m[K;
[6.261s]       |                                                    [01;35m[K^[m[K
[6.264s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.264s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.265s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.265s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.266s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.268s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.269s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.270s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.270s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:13:51:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.271s]    13 |     this->declare_parameter(PARAM_LEFT_LIDAR_FRAME[01;35m[K)[m[K;
[6.271s]       |                                                   [01;35m[K^[m[K
[6.272s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.273s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.273s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.274s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.274s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.275s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.275s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.276s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[6.276s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:14:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[6.277s]    14 |     this->declare_parameter(PARAM_RIGHT_LIDAR_FRAME[01;35m[K)[m[K;
[6.277s]       |                                                    [01;35m[K^[m[K
[6.278s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[6.278s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[6.279s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[6.280s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[6.280s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[6.281s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[6.281s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[6.282s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[8.147s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29[m[K,
[8.147s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26[m[K,
[8.148s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[8.151s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[8.152s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[8.153s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[8.155s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[8.155s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[8.156s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[8.156s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.157s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[8.157s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[8.158s] /opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[8.159s] [01m[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.159s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.160s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.161s] [01m[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.161s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:129:[m[K   required from here
[8.162s] [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™})
[8.162s]   185 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[8.163s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[8.163s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:23[m[K,
[8.164s]                  from [01m[K/opt/ros/galactic/include/rclcpp/subscription_base.hpp:29[m[K,
[8.164s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:26[m[K,
[8.165s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[8.165s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[8.166s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[8.166s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[8.167s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[8.167s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[8.167s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[8.168s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[8.168s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/include/mergeClouds.hpp:5[m[K,
[8.169s]                  from [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:1[m[K:
[8.169s] [01m[K/usr/include/c++/9/variant:1299:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[8.170s]  1299 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[8.170s]       |                [01;36m[K^~~~~~~~[m[K
[8.171s] [01m[K/usr/include/c++/9/variant:1299:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[8.171s]  1299 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[8.171s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[8.172s] [01m[K/usr/include/c++/9/variant:1300:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[8.172s]  1300 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[8.173s]       |                [01;36m[K^~~~~~~~[m[K
[8.173s] [01m[K/usr/include/c++/9/variant:1300:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[8.174s]  1300 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[8.174s]       |                          [01;36m[K^~~~~~~~~[m[K
[8.175s] [01m[K/usr/include/c++/9/variant:1362:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™
[8.175s]  1362 |  [01;36m[Koperator[m[K=(_Tp&& __rhs)
[8.176s]       |  [01;36m[K^~~~~~~~[m[K
[8.176s] [01m[K/usr/include/c++/9/variant:1362:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[8.177s] /usr/include/c++/9/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[8.178s] [01m[K/usr/include/c++/9/variant:1358:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::PointCloud2_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::PointCloud2_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::PointCloud2_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>][m[Kâ€™
[8.179s] [01m[K/opt/ros/galactic/include/rclcpp/any_subscription_callback.hpp:185:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[8.179s] [01m[K/opt/ros/galactic/include/rclcpp/subscription_factory.hpp:97:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<CallbackMessageT> >) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.179s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.180s] [01m[K/opt/ros/galactic/include/rclcpp/create_subscription.hpp:197:94:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.184s] [01m[K/opt/ros/galactic/include/rclcpp/node_impl.hpp:100:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<SubscriptionT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; CallbackT = std::_Bind<void (PointCloudCombiner::*(PointCloudCombiner*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; CallbackMessageT = sensor_msgs::msg::PointCloud2_<std::allocator<void> >; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::PointCloud2_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::PointCloud2_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[8.186s] [01m[K/home/ubuntu/bags/pc_merger_ws/src/pc_meger/src/mergeClouds.cpp:53:129:[m[K   required from here
[8.187s] [01m[K/usr/include/c++/9/variant:1276:8:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[8.188s]  1276 |  using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[8.188s]       |        [01;31m[K^~~~~~~~~~~~~~~[m[K
[11.543s] make[2]: *** [CMakeFiles/pc_merger.dir/build.make:63: CMakeFiles/pc_merger.dir/src/mergeClouds.cpp.o] Error 1
[11.544s] make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/pc_merger.dir/all] Error 2
[11.547s] make: *** [Makefile:141: all] Error 2
[11.567s] Invoked command in '/home/ubuntu/bags/pc_merger_ws/src/build/pc_merger' returned '2': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/ubuntu/bags/pc_merger_ws/src/build/pc_merger -- -j8 -l8
